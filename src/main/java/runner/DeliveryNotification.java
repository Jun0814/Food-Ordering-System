/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package runner;

import java.awt.BorderLayout;
import java.awt.Font;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.ArrayList;
import java.util.List;
import javax.swing.Box;
import javax.swing.BoxLayout;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import managefile.Data;
import managefile.Delivery;
import managefile.DeliveryReview;
import managefile.Food;
import managefile.Order;
import managefile.OrderItems;
import managefile.Runner;
import managefile.RunnerNotification;
import managefile.readFile;
import managefile.writeFile;

/**
 *
 * @author Asus
 */
public class DeliveryNotification extends javax.swing.JFrame {
    private String selectedRunnerId;
    private String orderId;
    private String notificationId;
    private String status;
    private String address;
    Order order = new Order();
    OrderItems orderitems = new OrderItems();
    Food food = new Food();
    RunnerNotification runnerNotification = new RunnerNotification();
    Runner runner = new Runner();
    Delivery delivery = new Delivery();
    DeliveryReview deliveryReview = new DeliveryReview();
    readFile read = new readFile();
    writeFile write = new writeFile();
    Data data = new Data();

    /**
     * Creates new form DeliveryNotification
     */
    public DeliveryNotification(String selectedRunnerId, String orderId, String notificationId, String status) {
        this.notificationId = notificationId;
        this.selectedRunnerId = selectedRunnerId;
        this.orderId = orderId;
        this.setSize(400, 600);
        this.orderId = orderId;
        this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
        List<Order> orders = read.readOrder(order.getFilepath());
        for(Order order : orders){
            if(order.getOrderID().equals(orderId)){
                addresstextField.setText(order.getOrderTypeDetails());
            }
        }
        List<OrderItems> orderItems = read.readOrderItems(orderitems.getFilepath());
        List<Food> foods = read.readFood(food.getFilepath());
        List<String[]> foodsOrdered = new ArrayList(); 
        for(OrderItems orderItem : orderItems){
            if(orderItem.getOrderID().equals(orderId)){
                String[] foodOrder = new String[2];
                String foodId = orderItem.getFoodID();
                for (Food food : foods){
                    if(food.getId().equals(foodId)){
                        foodOrder[0] = food.getName();
                    }
                }
                foodOrder[1] = orderItem.getQuantity();
                foodsOrdered.add(foodOrder);
            }
        }
        
        for (String[] foodOrder : foodsOrdered) {
            String foodName = foodOrder[0];
            String quantity = foodOrder[1];
            System.out.println(foodName);
            String text = "â€¢ " + foodName + " x " + quantity;

            // Create a label for each food item
            JLabel foodLabel = new JLabel(text);
            foodLabel.setFont(new Font("Arial", Font.PLAIN, 16));  // Customize the font if needed

            // Ensure the panel uses BoxLayout for vertical stacking
            itemListPanel.setLayout(new BoxLayout(itemListPanel, BoxLayout.Y_AXIS));

            // Add the label to the panel
            itemListPanel.add(foodLabel);

            // Optionally, you can add some space between items
            itemListPanel.add(Box.createVerticalStrut(5));  // Adds space between the labels

            // Make the frame visible
            this.setVisible(true);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        addresstextField = new javax.swing.JTextArea();
        jLabel2 = new javax.swing.JLabel();
        rejectBtn = new method.RoundedButton();
        acceptBtn = new method.RoundedButton();
        itemListPanel = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel1.setText("There is an order now at");

        addresstextField.setColumns(20);
        addresstextField.setFont(new java.awt.Font("Segoe UI", 2, 14)); // NOI18N
        addresstextField.setRows(5);
        addresstextField.setFocusable(false);
        jScrollPane1.setViewportView(addresstextField);

        jLabel2.setFont(new java.awt.Font("Segoe UI", 3, 24)); // NOI18N
        jLabel2.setText("Items:");

        rejectBtn.setText("Reject");
        rejectBtn.setBorderColor(new java.awt.Color(255, 0, 51));
        rejectBtn.setColorClick(new java.awt.Color(255, 51, 51));
        rejectBtn.setColorOver(new java.awt.Color(255, 153, 153));
        rejectBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rejectBtnActionPerformed(evt);
            }
        });

        acceptBtn.setText("Accept");
        acceptBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                acceptBtnActionPerformed(evt);
            }
        });

        itemListPanel.setLayout(new java.awt.BorderLayout());

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(itemListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jScrollPane1)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(acceptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 171, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(rejectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 177, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 356, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 74, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 32, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(itemListPanel, javax.swing.GroupLayout.DEFAULT_SIZE, 151, Short.MAX_VALUE)
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rejectBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(acceptBtn, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(20, 20, 20))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void acceptBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_acceptBtnActionPerformed
        // TODO add your handling code here:
        List<RunnerNotification> runnerNotifications = read.readRunnerNotification(runnerNotification.getFilepath());
        RunnerNotification header = new RunnerNotification("NotificationId", "RunnerId", "OrderId", "Status");

        //add the header at the beginning of the list
        runnerNotifications.add(0, header);
        for(RunnerNotification notification : runnerNotifications){
            //find the runnerNotificaiton using notificationId
            if(notification.getNotificationId().equals(notificationId)){
                //set status to accepted
                notification.setStatus("Accepted");
                //set the status of runner to unavailable to prevent being chosen again
                data.updateData(selectedRunnerId,5,"Unavailable",runner.getFilepath());
            }
        }
        write.writeRunnerNotification(runnerNotifications,runnerNotification.getFilepath(), false);
        this.dispose();
        JOptionPane.showMessageDialog(this, "Order Accepted Successfully", "Success", JOptionPane.INFORMATION_MESSAGE);
        //delivery text file
        List<Delivery> deliveries = read.readDelivery(delivery.getFilepath());
        String deliveryReviewId = null;
        LocalDateTime now = LocalDateTime.now();
        DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd'T'HH:mm:ss");
        String formattedDateTime = now.format(formatter);
        for (Delivery delivery : deliveries){
            //find the deliveryID using orderId
            if(delivery.getOrderID().equals(orderId)){
                String orderId = delivery.getOrderID();
                String deliveryId = delivery.getDeliveryID();
                deliveryReviewId = delivery.getDeliveryReviewID();
                // update datetime of delivery
                data.updateData(deliveryId,6,formattedDateTime,delivery.getFilepath());
                //update the runnerId of delivery txt file
                data.updateData(deliveryId,3,selectedRunnerId,delivery.getFilepath());
                //update status of delivery text file to accepted
                data.updateData(deliveryId,7,"Accepted",delivery.getFilepath());
                //update order status (!test)
                data.updateData(orderId,9, "Accepted",order.getFilepath());
            }
        }
        //delivery review text file
        List<DeliveryReview> deliveryReviews = read.readDeliveryReview(deliveryReview.getFilepath());
        for(DeliveryReview deliveryReview : deliveryReviews){       
            if(deliveryReview.getReviewID().equals(deliveryReviewId)){
                //change the runnerId in deliveryReview text file
                deliveryReview.setRunnerID(selectedRunnerId);
            }
        }
        write.writeDeliveryReview(deliveryReviews, deliveryReview.getFilepath());
    }//GEN-LAST:event_acceptBtnActionPerformed

    private void rejectBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rejectBtnActionPerformed
        // TODO add your handling code here:
        List<Runner> runners = read.readRunner(runner.getFilepath());
        String availableRunnerId = null;
        for(Runner runner : runners){
            if(runner.getId().equals(selectedRunnerId)){
               runner.setStatus("Unavailable");
            }
            if (runner.getStatus().equals("Available") && availableRunnerId == null){
                availableRunnerId = runner.getId();
                //replace available runner to send notification to him
                data.updateData(notificationId,1,availableRunnerId,runnerNotification.getFilepath());
            }
        }
        write.writeRunner(runners, runner.getFilepath());
        //delivery text file
        List<Delivery> deliveries = read.readDelivery(delivery.getFilepath());
        for (Delivery delivery : deliveries){
            if(delivery.getOrderID().equals(orderId)){
                String deliveryId = delivery.getDeliveryID();
                //change delivery status to rejected
                data.updateData(deliveryId,7,"Rejected",delivery.getFilepath());
            }
        }
        this.dispose();
        JOptionPane.showMessageDialog(null, "The order has been rejected.", "Order Rejected", JOptionPane.WARNING_MESSAGE);
    }//GEN-LAST:event_rejectBtnActionPerformed

    /**
     * @param args the command line arguments
     */

        public void run() {
            new DeliveryNotification(selectedRunnerId, orderId, notificationId, status).setVisible(true);
        }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private method.RoundedButton acceptBtn;
    private javax.swing.JTextArea addresstextField;
    private javax.swing.JPanel itemListPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private method.RoundedButton rejectBtn;
    // End of variables declaration//GEN-END:variables
}
